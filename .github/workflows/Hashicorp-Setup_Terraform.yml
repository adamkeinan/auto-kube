name: "HashiCorp - Setup Terraform"

on:
  push:
    branches: [terraform] 
  pull_request:
  # The branches below must be a subset of the branches above
    branches: [ main ]
  schedule:
    - cron: '17 21 * * 1'

jobs:
  setup-terraform:
    runs-on: ubuntu-latest    
    # You may pin to the exact commit or the version.  
    steps:
      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v1.3.2
        # uses: hashicorp/setup-terraform@d22444889af304a44b997011fbabb81ff705a7b4
        with:
          # The hostname of a Terraform Cloud/Enterprise instance to place within the credentials block of the Terraform CLI configuration file. Defaults to `app.terraform.io`.
          cli_config_credentials_hostname: app.terraform.io
          # The API token for a Terraform Cloud/Enterprise instance to place within the credentials block of the Terraform CLI configuration file.
          cli_config_credentials_token: $GIT_TF_API_TOKEN
          # The version of Terraform CLI to install. Instead of full version string you can also specify constraint string starting with "<" (for example `<1.13.0`) to install the latest version satisfying the constraint. A value of `latest` will install the latest version of Terraform CLI. Defaults to `latest`.
          terraform_version: latest
          # Whether or not to install a wrapper to wrap subsequent calls of the `terraform` binary and expose its STDOUT, STDERR, and exit code as outputs named `stdout`, `stderr`, and `exitcode` respectively. Defaults to `true`.
          terraform_wrapper: true  
    
  stage:
    name: deploy to staging
    runs-on: ubuntu-latest
