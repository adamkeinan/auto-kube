# This is a basic workflow to help you get started with Actions
- name: Super-Linter
  uses: github/super-linter@v4.6.1
  
  on:
  push:
    branches-ignore: [master]
    # Remove the line above to run when pushing to master
  pull_request:
    branches: [master]

###############
# Set the Job #
###############
  jobs:
    build:
      # Name the Job
      name: Lint Code Base
      # Set the agent to run on
      runs-on: ubuntu-latest

      ##################
      # Load all steps #
      ##################
      steps:
        ##########################
        # Checkout the code base #
        ##########################
        - name: Checkout Code
          uses: actions/checkout@v2
          with:
            # Full git history is needed to get a proper list of changed files within `super-linter`
            fetch-depth: -2

        ################################
        # Run Linter against code base #
        ################################
        - name: Lint Code Base
          uses: github/super-linter@v4
          env:
            VALIDATE_ALL_CODEBASE: false
            DEFAULT_BRANCH: master
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

- name: Metrics embed
  uses: lowlighter/metrics@latest
  with:
    # ... other options
    plugin_introduction: yes
    plugin_introduction_title: no # Hide section title
    plugin_stars: yes
    plugin_stars_limit: 4 # Limit to 4 entries
    plugin_followup: yes
    plugin_followup_sections: repositories, user #
    plugin_projects: yes
    plugin_projects_repositories: lowlighter/metrics/projects/1 # Display #1 project of lowlighter/metrics repository
    plugin_projects_limit: 4                                    # Limit to 4 entries
    plugin_projects_descriptions: yes                           # Display projects descriptions
    plugin_activity: yes
    plugin_activity_limit: 5    # Limit to 5 events
    plugin_activity_days: 14    # Keep only events from last 14 days (can be set to 0 to disable limitations)
    plugin_activity_filter: all # Show all events (use table above to filter events types)
    template: classic
    user: repository-owner # Optional if you're the owner of target repository and you're using your own personal token
    repo: repository-name  # Repository name
 
- name: GH Release
  uses: softprops/action-gh-release@v0.1.12

  on: push

  jobs:
    build:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v2
        - name: Release
          uses: softprops/action-gh-release@v1
          if: startsWith(github.ref, 'refs/tags/')

- name: CI

  # Controls when the workflow will run
  on:
    # Triggers the workflow on push or pull request events but only for the main branch
    push:
      branches: [ main ]
    pull_request:
      branches: [ main ]

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

  # A workflow run is made up of one or more jobs that can run sequentially or in parallel
  jobs:
    # This workflow contains a single job called "build"
    build:
      # The type of runner that the job will run on
      runs-on: ubuntu-latest

      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v2

        # Runs a single command using the runners shell
        - name: Run a one-line script
          run: echo Hello, world!

        # Runs a set of commands using the runners shell
        - name: Run a multi-line script
          run: |
            echo Add other actions to build,
            echo test, and deploy your project.
          
- name: HashiCorp - Setup Terraform
  # You may pin to the exact commit or the version.
  # uses: hashicorp/setup-terraform@d22444889af304a44b997011fbabb81ff705a7b4
  uses: hashicorp/setup-terraform@v1.2.1
  with:
    # The hostname of a Terraform Cloud/Enterprise instance to place within the credentials block of the Terraform CLI configuration file. Defaults to `app.terraform.io`.
    cli_config_credentials_hostname: # optional, default is app.terraform.io
    # The API token for a Terraform Cloud/Enterprise instance to place within the credentials block of the Terraform CLI configuration file.
    cli_config_credentials_token: # optional
    # The version of Terraform CLI to install. Instead of full version string you can also specify constraint string starting with "<" (for example `<1.13.0`) to install the latest version satisfying the constraint. A value of `latest` will install the latest version of Terraform CLI. Defaults to `latest`.
    terraform_version: # optional, default is latest
    # Whether or not to install a wrapper to wrap subsequent calls of the `terraform` binary and expose its STDOUT, STDERR, and exit code as outputs named `stdout`, `stderr`, and `exitcode` respectively. Defaults to `true`.
    terraform_wrapper: # optional, default is true     
 
  on:
    push:
      branches: 
        [main]    
        [release/*]
    
    jobs:
      my_job:
        name: deploy to staging
        runs-on: ubuntu-18.04

- name: Ansible Lint  # feel free to pick your own name
  uses: ansible/ansible-lint-action@v4.2.0.post0

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # Important: This sets up your GITHUB_WORKSPACE environment variable
    - uses: actions/checkout@v2

    - name: Lint Ansible Playbook
      # replace "master" with any valid ref
      uses: ansible/ansible-lint-action@master
      with:
        # [required]
        # Paths to ansible files (i.e., playbooks, tasks, handlers etc..)
        # or valid Ansible directories according to the Ansible role
        # directory structure.
        # If you want to lint multiple ansible files, use the following syntax
        # targets: |
        #   playbook_1.yml
        #   playbook_2.yml
        targets: ""
        # [optional]
        # Arguments to override a package and its version to be set explicitly.
        # Must follow the example syntax.
        override-deps: |
          ansible==2.9
          ansible-lint==4.2.0
        # [optional]
        # Arguments to be passed to the ansible-lint

        # Options:
        #   -q                    quieter, although not silent output
        #   -p                    parseable output in the format of pep8
        #   --parseable-severity  parseable output including severity of rule
        #   -r RULESDIR           specify one or more rules directories using one or
        #                         more -r arguments. Any -r flags override the default
        #                         rules in ansiblelint/rules, unless -R is also used.
        #   -R                    Use default rules in ansiblelint/rules in addition to
        #                         any extra
        #                         rules directories specified with -r. There is no need
        #                         to specify this if no -r flags are used
        #   -t TAGS               only check rules whose id/tags match these values
        #   -x SKIP_LIST          only check rules whose id/tags do not match these
        #                         values
        #   --nocolor             disable colored output
        #   --exclude=EXCLUDE_PATHS
        #                         path to directories or files to skip. This option is
        #                         repeatable.
        #   -c C                  Specify configuration file to use. Defaults to ".ansible-lint"
        args: ""

- name: Merge pull requests (automerge-action)
  uses: pascalgn/automerge-action@v0.14.2
  
  on:
  pull_request:
    types:
      - labeled
      - unlabeled
      - synchronize
      - opened
      - edited
      - ready_for_review
      - reopened
      - unlocked
  pull_request_review:
    types:
      - submitted
  check_suite:
    types:
      - completed
  status: {}
jobs:
  automerge:
    runs-on: ubuntu-latest
    steps:
      - name: automerge
        uses: "pascalgn/automerge-action@v0.14.2"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          
- name: Skip Duplicate Actions
  uses: fkirc/skip-duplicate-actions@v3.4.1
  
jobs:
  pre_job:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          # All of these options are optional, so you can remove them if you are happy with the defaults
          concurrent_skipping: 'never'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["**/README.md", "**/docs/**"]'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'

  main_job:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "Running slow tests..." && sleep 30
  
